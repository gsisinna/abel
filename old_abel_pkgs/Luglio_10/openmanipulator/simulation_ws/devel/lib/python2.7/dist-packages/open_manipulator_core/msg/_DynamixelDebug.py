# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from open_manipulator_core/DynamixelDebug.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DynamixelDebug(genpy.Message):
  _md5sum = "76c78346f1f2d00f38d1ed19974ced54"
  _type = "open_manipulator_core/DynamixelDebug"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32[] dxl_id
int32[] present_temp
int32[] present_load
int32[] present_volt
int32[] present_current
int32[] present_pos
int32[] present_vel
int32[] goal_pos
int32[] goal_vel
int32[] return_delay_time
int32[] feedforward_1st_gain
int32[] feedforward_2nd_gain
int32[] error_status
int32[] temp_limit
int32[] pos_p_gain
int32[] pos_i_gain
int32[] pos_d_gain
int32[] vel_p_gain
int32[] vel_i_gain
"""
  __slots__ = ['dxl_id','present_temp','present_load','present_volt','present_current','present_pos','present_vel','goal_pos','goal_vel','return_delay_time','feedforward_1st_gain','feedforward_2nd_gain','error_status','temp_limit','pos_p_gain','pos_i_gain','pos_d_gain','vel_p_gain','vel_i_gain']
  _slot_types = ['int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       dxl_id,present_temp,present_load,present_volt,present_current,present_pos,present_vel,goal_pos,goal_vel,return_delay_time,feedforward_1st_gain,feedforward_2nd_gain,error_status,temp_limit,pos_p_gain,pos_i_gain,pos_d_gain,vel_p_gain,vel_i_gain

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DynamixelDebug, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.dxl_id is None:
        self.dxl_id = []
      if self.present_temp is None:
        self.present_temp = []
      if self.present_load is None:
        self.present_load = []
      if self.present_volt is None:
        self.present_volt = []
      if self.present_current is None:
        self.present_current = []
      if self.present_pos is None:
        self.present_pos = []
      if self.present_vel is None:
        self.present_vel = []
      if self.goal_pos is None:
        self.goal_pos = []
      if self.goal_vel is None:
        self.goal_vel = []
      if self.return_delay_time is None:
        self.return_delay_time = []
      if self.feedforward_1st_gain is None:
        self.feedforward_1st_gain = []
      if self.feedforward_2nd_gain is None:
        self.feedforward_2nd_gain = []
      if self.error_status is None:
        self.error_status = []
      if self.temp_limit is None:
        self.temp_limit = []
      if self.pos_p_gain is None:
        self.pos_p_gain = []
      if self.pos_i_gain is None:
        self.pos_i_gain = []
      if self.pos_d_gain is None:
        self.pos_d_gain = []
      if self.vel_p_gain is None:
        self.vel_p_gain = []
      if self.vel_i_gain is None:
        self.vel_i_gain = []
    else:
      self.dxl_id = []
      self.present_temp = []
      self.present_load = []
      self.present_volt = []
      self.present_current = []
      self.present_pos = []
      self.present_vel = []
      self.goal_pos = []
      self.goal_vel = []
      self.return_delay_time = []
      self.feedforward_1st_gain = []
      self.feedforward_2nd_gain = []
      self.error_status = []
      self.temp_limit = []
      self.pos_p_gain = []
      self.pos_i_gain = []
      self.pos_d_gain = []
      self.vel_p_gain = []
      self.vel_i_gain = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.dxl_id)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.dxl_id))
      length = len(self.present_temp)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.present_temp))
      length = len(self.present_load)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.present_load))
      length = len(self.present_volt)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.present_volt))
      length = len(self.present_current)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.present_current))
      length = len(self.present_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.present_pos))
      length = len(self.present_vel)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.present_vel))
      length = len(self.goal_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.goal_pos))
      length = len(self.goal_vel)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.goal_vel))
      length = len(self.return_delay_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.return_delay_time))
      length = len(self.feedforward_1st_gain)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.feedforward_1st_gain))
      length = len(self.feedforward_2nd_gain)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.feedforward_2nd_gain))
      length = len(self.error_status)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.error_status))
      length = len(self.temp_limit)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.temp_limit))
      length = len(self.pos_p_gain)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.pos_p_gain))
      length = len(self.pos_i_gain)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.pos_i_gain))
      length = len(self.pos_d_gain)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.pos_d_gain))
      length = len(self.vel_p_gain)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.vel_p_gain))
      length = len(self.vel_i_gain)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.vel_i_gain))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.dxl_id = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.present_temp = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.present_load = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.present_volt = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.present_current = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.present_pos = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.present_vel = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal_pos = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal_vel = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.return_delay_time = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.feedforward_1st_gain = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.feedforward_2nd_gain = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.error_status = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.temp_limit = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.pos_p_gain = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.pos_i_gain = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.pos_d_gain = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.vel_p_gain = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.vel_i_gain = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.dxl_id)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.dxl_id.tostring())
      length = len(self.present_temp)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.present_temp.tostring())
      length = len(self.present_load)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.present_load.tostring())
      length = len(self.present_volt)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.present_volt.tostring())
      length = len(self.present_current)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.present_current.tostring())
      length = len(self.present_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.present_pos.tostring())
      length = len(self.present_vel)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.present_vel.tostring())
      length = len(self.goal_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.goal_pos.tostring())
      length = len(self.goal_vel)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.goal_vel.tostring())
      length = len(self.return_delay_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.return_delay_time.tostring())
      length = len(self.feedforward_1st_gain)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.feedforward_1st_gain.tostring())
      length = len(self.feedforward_2nd_gain)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.feedforward_2nd_gain.tostring())
      length = len(self.error_status)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.error_status.tostring())
      length = len(self.temp_limit)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.temp_limit.tostring())
      length = len(self.pos_p_gain)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.pos_p_gain.tostring())
      length = len(self.pos_i_gain)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.pos_i_gain.tostring())
      length = len(self.pos_d_gain)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.pos_d_gain.tostring())
      length = len(self.vel_p_gain)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.vel_p_gain.tostring())
      length = len(self.vel_i_gain)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.vel_i_gain.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.dxl_id = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.present_temp = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.present_load = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.present_volt = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.present_current = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.present_pos = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.present_vel = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal_pos = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal_vel = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.return_delay_time = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.feedforward_1st_gain = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.feedforward_2nd_gain = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.error_status = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.temp_limit = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.pos_p_gain = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.pos_i_gain = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.pos_d_gain = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.vel_p_gain = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.vel_i_gain = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
